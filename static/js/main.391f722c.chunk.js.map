{"version":3,"sources":["Counter/Display.tsx","Counter/Button.tsx","Counter/Counter.tsx","CounterSettings/SettingsButton.tsx","CounterSettings/Settings.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Display","props","className","value","Key","incStyle","margin","opacity","maxValue","resetStyle","Button","onClick","increasingTheValue","variant","color","style","resetValue","Counter","SettingsButton","setStyle","startValue","changeCounter","Settings","textFieldStyle","padding","width","border","borderRadius","type","onChange","e","stringCurrentValueOfMaxValue","currentTarget","setMaxValue","stringCurrentValueOfStartValue","setStartValue","App","useState","setValue","useEffect","valueAsString","localStorage","getItem","maxValueAsString","startValueAsString","JSON","parse","setItem","stringify","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.391f722c.chunk.js","sourcesContent":["import React from 'react';\nimport '../App.css';\n\nexport type FieldType = {\n    value: number\n}\n\nfunction Display(props: FieldType) {\n    return (\n        <div className=\"Display\">\n            {props.value}\n        </div>\n    );\n}\n\nexport default Display;\n","import React from 'react';\nimport '../App.css';\nimport {Button} from \"@material-ui/core\";\n\ntype ButtonProps = {\n    increasingTheValue: () => void\n    resetValue: () => void\n    maxValue: number\n    value: number\n}\n\nfunction Key(props: ButtonProps) {\n\n    const incStyle = {\n        margin: '20px',\n        opacity: props.value === props.maxValue ? '0.5' : ''\n    }\n\n    const resetStyle = {\n        margin: '20px',\n        opacity: props.value === 0 ? '0.5' : ''\n    }\n\n    return (\n        <div className={'Buttons'}>\n            <Button onClick={props.increasingTheValue} variant=\"contained\" color=\"primary\" style={incStyle}>\n                inc\n            </Button>\n            <Button onClick={props.resetValue} variant=\"contained\" color=\"primary\" style={resetStyle}>\n                reset\n            </Button>\n        </div>\n    );\n}\n\nexport default Key;\n","import React from 'react';\nimport '../App.css';\nimport Display from \"./Display\";\nimport Key from \"./Button\";\n\ntype CounterType = {\n    value: number\n    increasingTheValue: () => void\n    resetValue: () => void\n    maxValue: number\n}\n\nfunction Counter(props: CounterType) {\n    return (\n        <div className=\"Counter\">\n            <Display value={props.value}/>\n            <Key increasingTheValue={props.increasingTheValue}\n                 resetValue={props.resetValue}\n                 maxValue={props.maxValue}\n                 value={props.value}\n            />\n        </div>\n    );\n}\n\nexport default Counter;\n","import React from 'react';\r\nimport '../App.css';\r\nimport {Button} from \"@material-ui/core\";\r\n\r\ntype SettingButtonType = {\r\n    changeCounter: () => void\r\n    maxValue: number\r\n    startValue: number\r\n}\r\n\r\nfunction SettingsButton(props: SettingButtonType) {\r\n\r\n    const setStyle = {\r\n        margin: '20px',\r\n        opacity: props.maxValue <= props.startValue ? '0.5' : ''\r\n    }\r\n\r\n    return (\r\n        <div className={'Buttons'}>\r\n            <Button onClick={props.changeCounter} variant=\"contained\" color=\"primary\" style={setStyle}>\r\n                set\r\n            </Button>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default SettingsButton;\r\n","import React, {ChangeEvent} from 'react';\nimport '../App.css';\nimport SettingsButton from \"./SettingsButton\";\n\ntype SettingsType = {\n    setValue: any\n    maxValue: number\n    setMaxValue: any\n    startValue: number\n    setStartValue: any\n    changeCounter: () => void\n}\n\nfunction Settings(props: SettingsType) {\n\n    const textFieldStyle = {\n        padding: '5px',\n        width: '120px',\n        border: 'solid 2px #75d4f5',\n        borderRadius: '6px',\n    }\n\n    const onChangeMaxValue = (e: ChangeEvent<HTMLInputElement>) => {\n        let stringCurrentValueOfMaxValue = e.currentTarget.value\n\n        props.setMaxValue(+stringCurrentValueOfMaxValue)\n    };\n\n    const onChangeStartValue = (e: ChangeEvent<HTMLInputElement>) => {\n        let stringCurrentValueOfStartValue = e.currentTarget.value\n\n        props.setStartValue(+stringCurrentValueOfStartValue)\n    };\n\n    return (\n        <div className=\"Settings\">\n            <div className={'SetValues'}>\n                <div className={'Value'}>\n                    <span>max value:</span>\n                    <input type=\"number\" style={textFieldStyle} value={props.maxValue} onChange={onChangeMaxValue}/>\n                </div>\n                <div className={'Value'}>\n                    <span>start value:</span>\n                    <input type=\"number\" style={textFieldStyle} value={props.startValue} onChange={onChangeStartValue}/>\n                </div>\n            </div>\n            <SettingsButton changeCounter={props.changeCounter} maxValue={props.maxValue} startValue={props.startValue}/>\n        </div>\n    );\n}\n\nexport default Settings;\n","import React, {useEffect, useState} from 'react';\nimport './App.css';\nimport Counter from \"./Counter/Counter\";\nimport Settings from \"./CounterSettings/Settings\";\n\nfunction App() {\n\n    let [value, setValue] = useState(0)\n    let [maxValue, setMaxValue] = useState(0)\n    let [startValue, setStartValue] = useState(0)\n\n    useEffect(() => {\n        let valueAsString = localStorage.getItem('value')\n        let maxValueAsString = localStorage.getItem('maxValue')\n        let startValueAsString = localStorage.getItem('startValue')\n        if(maxValueAsString && valueAsString && startValueAsString){\n            setValue(JSON.parse(valueAsString))\n            setMaxValue(JSON.parse(maxValueAsString))\n            setStartValue(JSON.parse(startValueAsString))\n        }\n    }, [])\n\n    useEffect(() => {\n        localStorage.setItem('value', JSON.stringify(value))\n        localStorage.setItem('maxValue', JSON.stringify(maxValue))\n        localStorage.setItem('startValue', JSON.stringify(startValue))\n    }, [value, maxValue, startValue])\n\n    const incValue = () => {\n        if (value < maxValue) {\n            setValue(value + 1)\n        }\n    }\n\n    const resetValue = () => {\n        setValue(0)\n    }\n\n    const changeCounter = () => {\n        if(startValue < maxValue) {\n            setValue(startValue)\n        }\n    }\n\n    return (\n        <div className={'App'}>\n            <Settings\n                setValue={setValue}\n                maxValue={maxValue}\n                setMaxValue={setMaxValue}\n                startValue={startValue}\n                setStartValue={setStartValue}\n                changeCounter={changeCounter}\n            />\n            <Counter\n                value={value}\n                increasingTheValue={incValue}\n                resetValue={resetValue}\n                maxValue={maxValue}\n            />\n        </div>\n    );\n}\n\nexport default App;","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}